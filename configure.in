# $Id$ 
AC_PREREQ(02.50)
AC_INIT([honeytrap], [1.0.0], [tillmann.werner@gmx.de])
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(honeytrap,1.0.0)

# Since we get -O2 from configure defaults, which doesn't work in 64bit
# mode, let's make some changes here before calling _CC macros.
AC_ARG_ENABLE(64bit-gcc,
[  --enable-64bit-gcc	   try to compile 64bit (only tested on Sparc Solaris 9).],
		[ CFLAGS="-O0 -g" CC="gcc -m64"; export CFLAGS CC ],)

# Disable annoying practice of recursively re-running the autotools
AM_MAINTAINER_MODE
AM_PROG_CC_STDC
AC_PROG_CC
AM_PROG_LEX
AC_PROG_YACC
AC_PROG_LD(gnu-ld)
AC_PROG_LIBTOOL


## prepare fancy console output, taken from GNU shtools
# determine terminal bold sequence
term_bold=''
term_norm=''
case $TERM in
#   for the most important terminal types we directly know the sequences
xterm|xterm*|vt220|vt220*)
    term_bold=`awk 'BEGIN { printf("%c%c%c%c", 27, 91, 49, 109); }' </dev/null 2>/dev/null`
    term_norm=`awk 'BEGIN { printf("%c%c%c", 27, 91, 109); }' </dev/null 2>/dev/null`
    ;;
vt100|vt100*|cygwin)
    term_bold=`awk 'BEGIN { printf("%c%c%c%c%c%c", 27, 91, 49, 109, 0, 0); }' </dev/null 2>/dev/null`
    term_norm=`awk 'BEGIN { printf("%c%c%c%c%c", 27, 91, 109, 0, 0); }' </dev/null 2>/dev/null`
    ;;
#   for all others, we try to use a possibly existing `tput' or `tcout' utility
* )
    paths=`echo $PATH | sed -e 's/:/ /g'`
    for tool in tput tcout; do
	for dir in $paths; do
	    if test -r "$dir/$tool" ; then
		for seq in bold md smso; do # 'smso' is last
		    bold="`$dir/$tool $seq 2>/dev/null`"
		    if test ".$bold" != . ; then
			term_bold="$bold"
			break
		    fi
		done
		if test ".$term_bold" != . ; then
		    for seq in sgr0 me rmso init reset; do # 'reset' is last
			norm="`$dir/$tool $seq 2>/dev/null`"
			if test ".$norm" != . ; then
			    term_norm="$norm"
			    break
			fi
		    done
		fi
		break
	    fi
	done
	if test ".$term_bold" != . && test ".$term_norm" != . ; then
	    break;
	fi
    done
    ;;
esac

bold () {
	text=`echo -e "$1" | sed -e "s/%B/${term_bold}/g" -e "s/%b/${term_norm}/g" 2>/dev/null`
	echo "$text"
}


if test -n "$GCC"; then
      CFLAGS="$CFLAGS -Wall"
fi

AC_ARG_ENABLE(debug,
[  --enable-debug          enable debugging options (bugreports and developers only)],
                [ if test -n "$GCC"; then
                    CFLAGS="-O0 -DDEBUG -g"
                  else
                    CFLAGS="$CFLAGS -DDEBUG"
                  fi      
		  enable_debug="X"
                ], enable_debug=" ")

AC_ARG_ENABLE(profile,
[  --enable-profile        enable profiling options (developers only)],
        [ if test -n "$GCC"; then
            CFLAGS="$CFLAGS -DPROFILE -pg"
          else
            CFLAGS="$CFLAGS -DPROFILE"
          fi
	  enable_profile="X"
        ], enable_profile=" ")
AC_ARG_ENABLE(devmodules,
[  --enable-devmodules     enable unstable modules (not recommended for production setups)],
                [ if test -n "$GCC"; then
                    CFLAGS="-O0 -DDEBUG -g"
                  else
                    CFLAGS="$CFLAGS -DDEBUG"
                  fi      
		  enable_devmodules="X"
                ], enable_devmodules=" ")


#AC_CANONICAL_HOST
linux=no
sunos4=no

AC_C_BIGENDIAN
SHELL="/bin/sh"

case "$host" in
  *-openbsd2.6|*-openbsd2.5|*-openbsd2.4|*-openbsd2.3*)
    AC_DEFINE(OPENBSD,,[Define if OPENBSD])
    AC_DEFINE(BROKEN_SIOCGIFMTU,,[Define if BROKEN_SIOCGIFMTU])

    ;;
  *-openbsd*)
    AC_DEFINE(OPENBSD)

    ;;
  *-sgi-irix5*)
    AC_DEFINE(IRIX,,[Define if IRIX])
    no_libsocket=yes
    no_libnsl=yes
    if test -z "$GCC"; then
      sgi_cc=yes
    fi
    LDFLAGS=${LDFLAGS} -L/usr/local/lib
    extra_incl=-I/usr/local/include
    ;;
  *-sgi-irix6*)
    AC_DEFINE(IRIX)
    no_libsocket=yes
    no_libnsl=yes
    if test -z "$GCC"; then
      sgi_cc=yes
    fi
    LDFLAGS=${LDFLAGS} -L/usr/local/lib
    extra_incl=-I/usr/local/include
    ;;
  *-solaris*)
    AC_DEFINE(SOLARIS,,[Define if SOLARIS])
    CPPFLAGS="${CPPFLAGS} -DBSD_COMP -D_REENTRANT"
    ;;
  *-sunos*)
    AC_DEFINE(SUNOS,,[Define if SUNOS])
    sunos4=yes
    ;;
  *-linux*)
    linux=yes
    AC_DEFINE(LINUX,,[Define if LINUX])
    # libpcap doesn't even LOOK at the timeout you give it under Linux
       AC_DEFINE(PCAP_TIMEOUT_IGNORED,,[Define if PCAP_TIMEOUT_IGNORED])
    AC_SUBST(extra_incl)
    extra_incl=-I/usr/include/pcap
    ;;
  *-hpux10*)
    AC_DEFINE(HPUX,,[Define if HPUX])
    AC_DEFINE(WORDS_BIGENDIAN)
    AC_SUBST(extra_incl)
    extra_incl=-I/usr/local/include
    ;;

  *-freebsd*)
    AC_DEFINE(FREEBSD,,[Define if FREEBSD])
    CFLAGS="$CFLAGS -fPIC -DPIC"

    ;;
  *-bsdi*)
    AC_DEFINE(BSDI,,[Define if BSDI])
    ;;
  *-aix*)
    AC_DEFINE(AIX,,[Define if AIX])
     broken_types=yes
    ;;
  *-osf4*)
    AC_DEFINE(OSF1,,[Define if OSF1])
    tru64_types=yes
    ;;
  *-osf5.1*)
    AC_DEFINE(OSF1)
    ;;
  *-tru64*)
    AC_DEFINE(OSF1)
    tru64_types=yes
    ;;
# it is actually <platform>-apple-darwin1.2 or <platform>-apple-rhapsody5.x but lets stick with this for the moment    
  *-apple*)
    AC_DEFINE(MACOS,,[Define if MACOS])
    AC_DEFINE(BROKEN_SIOCGIFMTU)
    LDFLAGS="${LDFLAGS} -L/sw/lib"
    extra_incl=-I/sw/include
esac

# any sparc platform has to have this one defined.
AC_MSG_CHECKING(for sparc alignment)
if eval "echo $host_cpu|grep -i sparc >/dev/null"; then
     AC_DEFINE(WORDS_MUSTALIGN,,[Define if WORDS_MUSTALIGN])
     AC_MSG_RESULT(yes)
else
     AC_MSG_RESULT(no)
fi

dnl checking headers
AC_CHECK_HEADERS(strings.h)
AC_CHECK_HEADERS(string.h)
AC_CHECK_HEADERS(stdlib.h)
AC_CHECK_HEADERS(unistd.h)
AC_CHECK_HEADERS(sys/sockio.h)
AC_CHECK_HEADERS(pcap-bpf.h)
AC_CHECK_HEADERS(net/bpf.h)

dnl make sure we've got all our libraries
if test -z "$no_libnsl"; then
AC_CHECK_LIB(nsl, inet_ntoa)
fi

if test -z "$no_libsocket"; then
AC_CHECK_LIB(socket, socket)
fi


LIBS="${LIBS}"

# SunOS4 has several things `broken'
if test  "$sunos4" != "no"; then
AC_CHECK_FUNCS(vsnprintf,, LIBS=" $LIBS -ldb")
AC_CHECK_FUNCS(strtoul,, LIBS=" $LIBS -l44bsd")
fi


AC_CHECK_FUNCS(snprintf)
AC_CHECK_FUNCS(strerror)

AC_TRY_COMPILE([
#include <stdio.h>
],[char *foo; foo = sys_errlist[0];], 
AC_DEFINE(ERRLIST_PREDEFINED,,[Define if ERRLIST_PREDEFINED]))

AC_MSG_CHECKING(for __FUNCTION__)
AC_TRY_COMPILE([
#include <stdio.h>
],[printf ("%s", __FUNCTION__);],
sn_cv_have___FUNCTION__=yes, sn_cv__have___FUNCTION__=no)
if test "x$sn_cv_have___FUNCTION__" = "xyes"; then
   AC_MSG_RESULT(yes)
   AC_DEFINE(HAVE___FUNCTION__, 1,
	     [Define if the compiler understands __FUNCTION__.])
else
   AC_MSG_RESULT(no)
   AC_MSG_CHECKING(for __func__)
   AC_TRY_COMPILE([
#include <stdio.h>
],[printf ("%s", __func__);],
sn_cv_have___func__=yes, sn_cv__have___func__=no)
   if test "x$sn_cv_have___func__" = "xyes"; then
      AC_MSG_RESULT(yes)
      AC_DEFINE(HAVE___func__, 1,
		[Define if the compiler understands __func__.])
      AC_DEFINE(__FUNCTION__, __func__, [Define __FUNCTION__ as required.])
   else
      AC_MSG_RESULT(no)
      AC_DEFINE(__FUNCTION__, "mystery function")
   fi
fi


#----------------------- network stream monitors ---------------------------
AC_ARG_WITH(stream_mon,
	[  --with-stream-mon=TYPE          network stream monitor],
	[with_stream_mon="$withval"], [with_stream_mon=""])

AM_CONDITIONAL(PCAP_MON, test x$with_stream_mon = xpcap)
AM_CONDITIONAL(NFQ_MON, test x$with_stream_mon = xnfq)
AM_CONDITIONAL(IPQ_MON, test x$with_stream_mon = xipq)

pcap_mon=" "
ipq_mon=" "
nfq_mon=" "
case "x$with_stream_mon" in
	"xpcap")
		with_pcap_mon="X"
		AC_ARG_WITH(libpcap_includes,
			[  --with-libpcap-includes=DIR     libpcap include directory],
			[with_libpcap_includes="$withval"],[with_libpcap_includes=no])

		AC_ARG_WITH(libpcap_libraries,
			[  --with-libpcap-libraries=DIR    libpcap library directory],
			[with_libpcap_libraries="$withval"],[with_libpcap_libraries=no])

		if test "$with_libpcap_includes" != "no"; then
			CPPFLAGS="${CPPFLAGS} -I${with_libpcap_includes}"
		fi
		HPCAP=""
		AC_CHECK_HEADER(pcap.h,, HPCAP="no")
		if test "$HPCAP" = "no"; then
			echo
			bold "   %BError%b - libpcap headers not found. Install them or use the following options:"
			echo
			bold "   %B--with-libpcap-includes=%b\133location of libpcap header files\135"
			echo
			exit 1
		fi

		if test "$with_libpcap_libraries" != "no"; then
			LDFLAGS="${LDFLAGS}  -L${with_libpcap_libraries}"
		fi
		LPCAP=""
		AC_CHECK_LIB(pcap, pcap_datalink,, LPCAP="no")
		if test "$LPCAP" = "no"; then
			echo
			bold "   %BError%b - libpcap library not found. Install it or use the following options:"
			echo
			bold "   %B--with-libpcap-libraries=%b\133location of libpcap shared library files\135"
			echo
			exit 1
		fi

		AC_DEFINE([USE_PCAP_MON], [], [Define if pcap connection monitor is used])
		;;
	"xnfq")
		with_nfq_mon="X"
		AC_ARG_WITH(libnetfilter_queue_includes,
			[  --with-libnfq-includes=DIR      libnetfilter_queue include directory],
			[with_libnetfilter_queue_includes="$withval"],[with_libnetfilter_queue_includes=no])

		AC_ARG_WITH(libnetfilter_queue_libraries,
			[  --with-libnfq-libraries=DIR     libnetfilter_queue library directory],
			[with_libnetfilter_queue_libraries="$withval"],[with_libnetfilter_queue_libraries=no])

		if test "$with_libnetfilter_queue_includes" != "no"; then
			CPPFLAGS="${CPPFLAGS} -I${with_libnetfilter_queue_includes}"
		fi
		HNFQ=""
		AC_CHECK_HEADER(libnetfilter_queue/libnetfilter_queue.h,, HNFQ="no")
		if test "$HNFQ" = "no"; then
			echo
			bold "   %BError%b - libnetfilter_queue headers not found. Install them or use the following options:"
			echo
			bold "   %B--with-libnfq-includes=%b\133location of libnetfilter_queue header files\135"
			echo
			exit
		fi

		if test "$with_libnetfilter_queue_libraries" != "no"; then
			LDFLAGS="${LDFLAGS}  -L${with_libnetfilter_queue_libraries}"
		fi
		LNFQ=""
		AC_CHECK_LIB(netfilter_queue, nfq_open,, LNFQ="no")
		if test "$LNFQ" = "no"; then
			echo
			bold "   %BError%b - libnetfilter_queue library not found. Install it or use the following options:"
			echo
			bold "   %B--with-libnfq-libraries=%b\133location of libnetfilter_queue shared library files\135"
			echo
			exit
		fi

		AC_DEFINE([USE_NFQ_MON], [], [Define if netfilter_queue connection monitor is used])
		;;
	"xipq")
		with_ipq_mon="X"
		AC_ARG_WITH(libipq_includes,
			[  --with-libipq-includes=DIR      libipq include directory],
			[with_libipq_includes="$withval"],[with_libipq_includes=no])

		AC_ARG_WITH(libipq_libraries,
			[  --with-libipq-libraries=DIR     libipq library directory],
			[with_libipq_libraries="$withval"],[with_libipq_libraries=no])

		if test "$with_libipq_includes" != "no"; then
			CPPFLAGS="${CPPFLAGS} -I${with_libipq_includes}"
		fi
		AC_CHECK_HEADER(libipq.h,, HIPQ="no")
		if test "$HIPQ" = "no"; then
			echo
			bold "   %BError%b - libipq headers not found. Install them or use the following options:"
			echo
			bold "   %B--with-libipq-includes=%b\133location of libipq header files\135"
			echo
			exit
		fi

		if test "$with_libipq_libraries" != "no"; then
			LDFLAGS="${LDFLAGS}  -L${with_libipq_libraries}"
		fi
		LIPQ=""
		AC_CHECK_LIB(ipq, ipq_set_mode,, LIPQ="no")
		if test "$LIPQ" = "no"; then
			echo
			bold "   %BError%b - libipq library not found. Install it or use the following options:"
			echo
			bold "   %B--with-libipq-libraries=%b\133location of libipq shared library files\135"
			echo
			exit
		fi

		AC_DEFINE([USE_IPQ_MON], [], [Define if ip_queue connection monitor is used])
		;;
	"xipfw")
		echo
		echo "The ipfw monitor is currently not implemented."
		echo "Please choose a different stream monitor."
		exit 1
		;;
	*)
		echo
		bold "   %BError%b - No connection monitor selected. Please reconfigure with one of the following:"
		echo
		bold "   %B--with-stream-mon=%bnfq    receive packets via netfilter's NFQUEUE target (Linux only, recommended)"
		bold "   %B--with-stream-mon=%bipq    receive packets via netfilter's QUEUE target (Linux only)"
		bold "   %B--with-stream-mon=%bpcap   receive packets using a built-in pcap sniffer"
		echo
		exit 1
esac




#----------------------- optional plugins ---------------------------

AC_ARG_WITH(spamsum,
	[  --with-spamsum                  perform SpamSum similarity analysis for recorded attacks])
AM_CONDITIONAL(BUILD_SPAMSUM_PLUGIN, test x$with_spamsum = xyes)
if test "$with_spamsum" = "yes"; then
	with_spamsum="X"
else
	with_spamsum=" "
fi


AC_ARG_WITH(clamav,
	[  --with-clamav                   scan downloaded samples with ClamAV antivirus engine],
	[with_clamav="$withval"], [with_clamav=""])
AM_CONDITIONAL(BUILD_CLAMAV_PLUGIN, test x$with_clamav = xyes)
if test "$with_clamav" = "yes"; then
  with_clamav="X"
  AC_ARG_WITH(libclamav_includes,
    [  --with-libclamav-includes=DIR   libclamav include directory],
    [with_libclamav_includes="$withval"],[with_libclamav_includes=no])

  AC_ARG_WITH(libclamav_libraries,
    [  --with-libclamav-libraries=DIR  libclamav library directory],
    [with_libclamav_libraries="$withval"],[with_libclamav_libraries=no])

  if test "$with_libclamav_includes" != "no"; then
    CPPFLAGS="${CPPFLAGS} -I${with_libclamav_includes}"
  fi
  HCLAMAV="yes"
  AC_CHECK_HEADER(clamav.h,, HCLAMAV="no")
  if test "$HCLAMAV" = "no"; then
    echo
    bold "   %BError%b - libclamav headers not found. Install them or use the following options:"
    echo
    bold "   %B--with-libclamav-includes=%b\133location of libclamav header filesi\135"
    echo
    exit
  fi

  if test "$with_libclamav_libraries" != "no"; then
    LDFLAGS="${LDFLAGS}  -L${with_libclamav_libraries}"
  fi
  LCLAMAV="yes"
  AC_CHECK_LIB(clamav, cl_load,, LCLAMAV="no")
  if test "$LCLAMAV" = "no"; then
    echo
    bold "   %BError%b - libclamav library not found. Install it or use the following options:"
    echo
    bold "   %B--with-libclamav-libraries=%b\133location of libclamav shared library files\135"
    echo
    exit
  fi
else
  with_clamav=" "
fi


AC_ARG_WITH(cpuemu,
	[  --with-cpuemu                   perform shellcode analysis in x86 CPU emulation])
AM_CONDITIONAL(BUILD_CPUEMU_PLUGIN, test x$with_cpuemu = xyes)
if test "$with_cpuemu" = "yes"; then
  if test "$enable_devmodules" != "X"; then
    echo
    echo "   The cpuEmu plugin is still unstable and should not be used in production setups."
    bold "   Use %B--enable-devmodules%b to build it anyway."
    echo
    exit
  fi

  with_cpuemu="X"
  AC_ARG_WITH(libemu_includes,
    [  --with-libemu-includes=DIR      libemu include directory],
    [with_libemu_includes="$withval"],[with_libemu_includes=no])

  AC_ARG_WITH(libemu_libraries,
    [  --with-libemu-libraries=DIR     libemu library directory],
    [with_libemu_libraries="$withval"],[with_libemu_libraries=no])

  if test "$with_libemu_includes" != "no"; then
    CPPFLAGS="${CPPFLAGS} -I${with_libemu_includes}"
  fi
  HEMU="yes"
  AC_CHECK_HEADER(emu/emu.h,, HEMU="no")
  if test "$HEMU" = "no"; then
    echo
    bold "   %BError%b - libemu headers not found. Install them or use the following options:"
    echo
    bold "   %B--with-libemu-includes=%b\133location of libemu header files\135"
    echo
    exit
  fi

  if test "$with_libemu_libraries" != "no"; then
    LDFLAGS="${LDFLAGS}  -L${with_libemu_libraries}"
  fi
  LEMU="yes"
  AC_CHECK_LIB(emu, emu_getpc_check,, LEMU="no")
  if test "$LEMU" = "no"; then
    echo
    bold "   %BError%b - libemu library not found. Install it or use the following options:"
    echo
    bold "   %B--with-libemu-libraries=%b\133location of libemu shared library files\135"
    echo
    exit
  fi

else
  with_cpuemu=" "
fi



AC_ARG_WITH(submit-mwserv,
	[  --with-submit-mwserv            submit malware samples to a central server])
AM_CONDITIONAL(BUILD_SUBMIT_MWSERV_PLUGIN, test x$with_submit_mwserv = xyes)
if test "$with_submit_mwserv" = "yes"; then
	if test "$enable_devmodules" != "X"; then
		echo
		echo "   The submitMWserv plugin is still unstable and should not be used in production setups."
		bold "   Use %B--enable-devmodules%b to build it anyway."
		echo
		exit
	fi

	with_submit_mwserv="X"

	AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, gethostbyname))
	AC_CHECK_FUNC(connect, , AC_CHECK_LIB(socket, connect))

	AC_ARG_WITH(libcurl_includes,
	[  --with-libcurl-includes=DIR     libcurl include directory],
	[with_libcurl_includes="$withval"],[with_libcurl_includes=no])

	AC_ARG_WITH(libcurl_libraries,
	[  --with-libcurl-libraries=DIR    libcurl library directory],
	[with_libcurl_libraries="$withval"],[with_libcurl_libraries=no])

	if test "$with_libcurl_includes" != "no"; then
		CPPFLAGS="${CPPFLAGS} -I${with_libcurl_includes}"
	fi
	HCURL="yes"
	AC_CHECK_HEADER(curl.h,, HCURL="no")
	if test "$HCURL" = "no"; then
		echo
		bold "   %BError%b - libcurl headers not found. Install them or use the following options:"
		echo
		bold "   %B--with-libcurl-includes=%b\133location of libcurl header files\135"
		echo
		exit
	fi

	if test "$with_libcurl_libraries" != "no"; then
		LDFLAGS="${LDFLAGS}  -L${with_libcurl_libraries}"
	fi
	LCURL="yes"
	AC_CHECK_LIB(curl, curl_version, LCURL="yes", LCURL="no")
	if test "$LCURL" = "no"; then
		echo
		bold "   %BError%b - libcurl library not found. Install it or use the following options:"
		echo
		bold "   %B--with-libcurl-libraries=%b\133location of libcurl shared library files\135"
		echo
		exit
	fi
else
	with_submit_mwserv=" "
fi



AC_ARG_WITH(cspm,
	[  --with-cspm                     perform shellcode pattern matching])
AM_CONDITIONAL(BUILD_CSPM_PLUGIN, test x$with_cspm = xyes)
if test "$with_cspm" = "yes"; then
  if test "$enable_devmodules" != "X"; then
    echo
    echo "   The CSPM plugin is still unstable and should not be used in production setups."
    bold "   Use %B--enable-devmodules%b to build it anyway."
    echo
    exit
  fi

  with_cspm="X"

  AC_ARG_WITH(libpcre_includes,
    [  --with-libpcre-includes=DIR     libpcre include directory],
    [with_libpcre_includes="$withval"],[with_libpcre_includes=no])

  AC_ARG_WITH(libpcre_libraries,
    [  --with-libpcre-libraries=DIR    libpcre library directory],
    [with_libpcre_libraries="$withval"],[with_libpcre_libraries=no])

  if test "$with_libpcre_includes" != "no"; then
    CPPFLAGS="${CPPFLAGS} -I${with_libpcre_includes}"
  fi
  HPCRE="yes"
  AC_CHECK_HEADER(pcre.h,, HPCRE="no")
  if test "$HPCRE" = "no"; then
    echo
    bold "   %BError%b - libpcre headers not found. Install them or use the following options:"
    echo
    bold "   %B--with-libpcre-includes=%b\133location of libpcre header files\135"
    echo
    exit
  fi

  if test "$with_libpcre_libraries" != "no"; then
    LDFLAGS="${LDFLAGS}  -L${with_libpcre_libraries}"
  fi
  LPCRE=""
  AC_CHECK_LIB(pcre, pcre_compile,, LPCRE="no")
  if test "$LPCRE" = "no"; then
    echo
    bold "   %BError%b - libpcre library not found. Install it or use the following options:"
    echo
    bold "   %B--with-libpcre-libraries=%b\133location of libpcre shared library files\135"
    echo
    exit
  fi

else
	with_cspm=" "
fi



AC_ARG_WITH(postgres,
	[  --with-postgres                 store attack data in PostgreSQL database])
AM_CONDITIONAL(BUILD_POSTGRES_PLUGIN, test x$with_postgres = xyes)
if test "$with_postgres" = "yes"; then
  with_postgres="X"
  AC_ARG_WITH(libpq_includes,
    [  --with-libpq-includes=DIR       libpq include directory],
    [with_libpq_includes="$withval"],[with_libpq_includes=no])

  AC_ARG_WITH(libpq_libraries,
    [  --with-libpq-libraries=DIR      libpq library directory],
    [with_libpq_libraries="$withval"],[with_libpq_libraries=no])

  if test "$with_libpq_includes" != "no"; then
    CPPFLAGS="${CPPFLAGS} -I${with_libpq_includes}"
  fi
  HPQ="yes"
  AC_CHECK_HEADER(libpq-fe.h,, HPQ="no")
  if test "$HPQ" = "no"; then
    echo
    bold "   %BError%b - libpq headers not found. Install them or use the following options:"
    echo
    bold "   %B--with-libpq-includes=%b\133location of libpq header files\135"
    echo
    exit
  fi

  if test "$with_libpq_libraries" != "no"; then
    LDFLAGS="${LDFLAGS}  -L${with_libpq_libraries}"
  fi
  LPQ="yes"
  AC_CHECK_LIB(pq, PQconnectdb,, LPQ="no")
  if test "$LPQ" = "no"; then
    echo
    bold "   %BError%b - libpq library not found. Install it or use the following options:"
    echo
    bold "   %B--with-libpq-libraries=%b\133location of libpq shared library files\135"
    echo
    exit
  fi

  AC_DEFINE([USE_POSTGRES_DB], [], [Define to store attacks in PostgreSQL database])
else
  with_postgres=" "
fi

#-------------------------------------------------------------



default_directory="/usr /usr/local"

AC_CHECK_LIB(dl, dlsym,, DLLIB="no")
if test "$DLLIB" != "no"; then
	LIBS="$LIBS -ldl"
	LDFLAGS="$LDFLAGS -Wl,--export-dynamic"
	else
	AC_CHECK_LIB(c, dlsym,, DLCLIB="no")
	if test "$DLCLIB" = "no"; then
		echo
		bold "   %BError%b - Programmatic interface to dynamic link loader not found."
		echo "          Cannot use dynamic plugin libraries."
		echo
		exit 1
	fi
fi


if test "$tru64_types" = "yes"; then
        AC_CHECK_TYPE(u_int8_t, unsigned char)
        AC_CHECK_TYPE(u_int16_t, unsigned short)
        AC_CHECK_TYPE(u_int32_t, unsigned int)
else
	if test "$broken_types" = "yes" ; then
		AC_CHECK_TYPE(u_int8_t, unsigned char)
		AC_CHECK_TYPE(u_int16_t, unsigned short)
		AC_CHECK_TYPE(u_int32_t, unsigned long int)
	else
		AC_CHECK_TYPE(u_int8_t, uint8_t)
		AC_CHECK_TYPE(u_int16_t, uint16_t)
		AC_CHECK_TYPE(u_int32_t, uint32_t)
	fi
fi

# Check for electric fence malloc debugger
AC_ARG_WITH(efence, [  --with-efence                   link with electric fence ])
if test "$with_efence" = "yes"
then
	with_efence="X"
	LEFENCE="yes"
	AC_CHECK_LIB(efence, EF_ALIGNMENT, LIBS="${LIBS} -lefence", LEFENCE="no")
	if test "$LEFENCE" = "no"; then
		echo
		bold "   %BError%b - Electric fence libraries not found."
		bold "          Install them and re-run configure with %B--with-efence%b."
		echo
		exit 1
	fi
else
	with_efence=" "
fi


# let's make some fixes..

CFLAGS=`echo $CFLAGS |sed -e 's/-I\/usr\/include //g'`
CPPFLAGS=`echo $CPPFLAGS | sed -e 's/-I\/usr\/include //g'`

INCLUDES='-I$(top_srcdir) -I$(top_srcdir)/src'

AC_SUBST(INCLUDES)


if test "$with_ipq_mon" != "X"; then with_ipq_mon=" "; fi
if test "$with_nfq_mon" != "X"; then with_nfq_mon=" "; fi
if test "$with_ipfw_mon" != "X"; then with_ipfw_mon=" "; fi
if test "$with_pcap_mon" != "X"; then with_pcap_mon=" "; fi


AC_PROG_INSTALL
AC_CONFIG_FILES([Makefile
		doc/Makefile
		src/Makefile
		src/modules/Makefile 
		src/modules/htm_cspm/Makefile])

AC_OUTPUT


echo
bold "  ----- %Bhoneytrap configuration%b -----"
echo
echo "  General options"
bold "    (%B$enable_debug%b)  Debugging"
bold "    (%B$enable_profile%b)  Profiling"
bold "    (%B$enable_devmodules%b)  Unstable Modules"
bold "    (%B$with_efence%b)  Electric Fence"
echo
echo "  Connection monitor"
bold "    (%B$with_ipq_mon%b)  Linux ip_queue (ipq)"
bold "    (%B$with_ipfw_mon%b)  FreeBSD ipfw (ipfw)"
bold "    (%B$with_nfq_mon%b)  Linux libnetfilter_queue (nfq)"
bold "    (%B$with_pcap_mon%b)  Libpcap (pcap)"
echo
echo "  Optional plugins"
bold "    (%B$with_clamav%b)  ClamAV"
bold "    (%B$with_cpuemu%b)  cpuEmu"
bold "    (%B$with_cspm%b)  CSPM"
bold "    (%B$with_postgres%b)  PostgeSQL"
bold "    (%B$with_spamsum%b)  SpamSum"
bold "    (%B$with_submit_mwserv%b)  submitMwserv"
